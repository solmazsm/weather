{"version":3,"sources":["components/FormN.js","components/Information.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["FormN","props","continue","e","preventDefault","nextStep","state","step","fname","lname","zipcode","handleChange","bind","event","target","value","type","checked","name","this","setState","values","className","class","aria-describedby","onChange","defaultValue","onClick","React","Component","Information","loading","back","prevStep","Temp","City","Description","Form","undefined","getWeather","form_value","a","url","fetch","api","json","data","main","temp","weather","description","input","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ab46d31.chunk.js","sourcesContent":["import React  from 'react';\r\nimport 'tachyons';\r\n\r\nexport class FormN extends React.Component {\r\n\t\r\n\tconstructor(props) {\r\n    super(props);\r\n    this.state = {step :1, fname: '', lname: '', zipcode: ''};\r\n    this.handleChange = this.handleChange.bind(this);\r\n   \r\n  }\r\ncontinue = (e) => {\r\n\te.preventDefault();\r\n\tthis.props.nextStep(this.state);}\r\n\r\nhandleChange(event)  {\r\n\tconst target = event.target;\r\n    const value = target.type === 'checkbox' ? target.checked : target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });}\r\n\r\n\trender(){\r\n\t\tconst {values} = this.props;\r\n\t\treturn(\r\n<article className=\"br3 ba  b--black-10 mv4 w-100 w-50-m w-25-l mw5 center shadow-5 bg-light-gray\">\r\n    <form   className=\"pa4 black-80\">\r\n      <div className=\"measure\">\r\n        <label  className=\"f25 b db mb2 tl\" > <span class=\"blue\">\r\n        Get current weather using a US Zip Codes </span></label><br />\r\n        <label  className=\"f15 db mb2 tl normal\">First Name </label>\r\n        <input name=\"fname\"   className=\"input-reset ba b--black-20 pa2 mb2 db w-100\" type=\"text\" aria-describedby=\"name-desc\" \r\n        \tonChange={this.handleChange} defaultValue={values.fname} />\r\n        <label  className=\"f15 db mb2 tl\">Last Name </label>\r\n        <input name=\"lname\"   className=\"input-reset ba b--black-20 pa2 mb2 db w-100\" type=\"text\" aria-describedby=\"name-desc\"  \r\n        \tonChange={this.handleChange} defaultValue={values.lname}/>\r\n         <label  className=\"f15 db db mb2 tl\">Zip Code </label>\r\n         <input name=\"zipcode\"  className=\"input-reset ba b--black-20 pa2 mb2 db w-100\" type=\"text\" aria-describedby=\"name-desc\" \r\n         \tonChange={this.handleChange} defaultValue={values.zipcode}/>\r\n        </div>\r\n      <div className=\"tc mt3\">\r\n      <button onClick={this.continue}   className=\"white  pv3 ph4 bg-blue hover-bg-mid-red bn br2 hover-shadow-inner pointer\">\r\n        Continue\r\n      </button>\r\n    </div>\r\n   \r\n    </form>\r\n  </article>\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\nexport default FormN;","import React from 'react';\r\nimport 'tachyons';\r\n\r\nclass Information extends React.Component {\r\n \r\nstate = {\r\n\tloading: true,\r\n};\r\ncontinue = e =>{\r\n\te.preventDefault();\r\n\tthis.props.nextStep();}\r\n\r\nback = e =>{\r\n\te.preventDefault();\r\n\tthis.props.prevStep();\r\n}\r\nrender() {\r\nreturn (\r\n\t<article className=\"br3 ba  b--black-10 mv4 w-100 w-50-m w-25-l mw5 center shadow-5 bg-light-gray\">\r\n\t<form   className=\"pa4 black-80\">\r\n\t  <div className=\"measure\">\r\n\t    <label  className=\"f20 b db mb2 tl\">Hello {this.props.values.fname} </label>\r\n\t     <label  className=\"f15 db mb2 tl normal\">Weather </label>\r\n\t \t   <div>\r\n\t\t   <p>Temp:{this.props.values.Temp}</p>\r\n\t\t   <p>City:{this.props.values.City}</p>\r\n\t   \t   <p>Description:{this.props.values.Description}</p>\r\n\t      </div>\r\n\t   <br /><br /><br />\r\n\t    <label  className=\"f15 db mb2 tl\">You are in: </label>\r\n\t  \t  <label  className=\"f20 b db mb2 tl\">Zip Code: {this.props.values.zipcode}</label>\r\n\t  </div>\r\n\t  <div className=\"tc mt3\">\r\n      <button onClick={this.back} className=\"white  pv3 ph4 bg-blue hover-bg-mid-red bn br2 hover-shadow-inner pointer\">\r\n        Back\r\n      </button>\r\n    </div>\r\n\t</form>\r\n</article>\r\n \r\n);\r\n}\r\n}\r\nexport default Information;","import React from 'react';\r\nimport FormN from './FormN';\r\nimport Information from './Information';\r\n\r\nexport class Form extends React.Component {\r\n\r\n\tstate = {\r\n\t\tTemp:undefined,\r\n\t\tCity:undefined,\r\n\t\tDescription:undefined,\r\n\t\tfname: undefined,\r\n\t\tlname: undefined,\r\n\t\tzipcode: undefined\r\n\t}\r\ngetWeather = async (form_value) => {\r\n \r\n  \tconst zipcode= form_value.zipcode;\r\n \tconst key = 'e1005b118153e1575a50e02cdd3c2d85';\r\n \tconst url = `https://api.openweathermap.org/data/2.5/weather?zip=${zipcode},us&appid=${key}`;\r\n \t//console.log(url);\r\n   \tconst api = await fetch(url);\r\n  \tconst data = await api.json();\r\n \t//console.log(data.weather);\r\n  \tif (zipcode){\r\n  \t\r\n  \tthis.setState({Temp: data.main.temp,\r\n  \t\tCity: data.name,\r\n  \t\tDescription: data.weather[0].description,\r\n  \t\tfname: form_value.fname,\r\n  \t\tlname: form_value.lname,\r\n  \t\tzipcode: form_value.zipcode\r\n  \t});\r\n  } else {\r\nthis.setState({Temp: undefined,\r\n  \t\tCity: undefined,\r\n  \t\tDescription: undefined,\r\n  \t\tfname: undefined,\r\n  \t\tlname: undefined,\r\n  \t\tzipcode: undefined\r\n  \t});\r\n  }\r\n  }\r\n\r\n\tstate = {\r\n\t\tstep: 1,\r\n\t\tfname:'',\r\n\t\tlname:'',\r\n\t\tzipcode:''\r\n\t}\r\n\r\nprevStep = () => {\r\n  const {step } = this.state;\r\n  this.setState({\r\n    step: step - 1\r\n  });\r\n}\r\n  nextStep = (form_value) => {\r\n  this.getWeather(form_value);\r\n  const {step } = this.state;\r\n  this.setState({\r\n    step: step + 1\r\n  });\r\n}\r\nhandleChange = input => e => {\r\n\tthis.setState({[input]: e.target.value});\r\n}\r\n\trender() {\r\n\t\t\t//console.log(this.state);\r\n\t\tconst {step} = this.state;\r\n\t\tconst {fname, lname, zipcode} = this.state;\r\n\t\tconst values = {fname, lname, zipcode}\r\n\r\n\t\tswitch(step){\r\n\t\t\tcase 1:\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<FormN\r\n\t\t\t\t\tnextStep={this.nextStep}\r\n\t\t\t\t\thandleChange={this.handleChange}\r\n\t\t\t\t\tvalues={values}\r\n\t\t\t\t\tgetWeather={this.getWeather}\r\n\t\t\t\t\t/>)\r\n\t\t\t case 2: \r\n\t\t\t\t return (\r\n\t\t\t\t\t<Information\r\n\t\t\t\t\t//getWeather={this.getWeather}\r\n\t\t\t\t\tnextStep={this.nextStep}\r\n\t\t\t\t\tprevStep={this.prevStep}\r\n\t\t\t\t\t//handleChange={this.handleChange}\r\n\t\t\t\t\t//form={values}\r\n\t\t\t\t\tvalues={this.state}\r\n\r\n\t\t\t\t\t/>)\r\n\t\t\t default: \r\n\t\t\t\r\n\t\t}\r\n\t}\r\n}\r\nexport default Form;","import React, {Component} from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Form   from './components/Form';\nimport './App.css';\n//import { HashRouter, Route, Link } from \"react-router-dom\";\nclass App extends Component {\n\n  render(){\n  return (\n    <div className=\"App\">\n      <Form />\n    </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}